#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos name "route name"
# @parseArger opt methods "HTTP methods (GET,POST,PUT,DELETE)" --repeat
# @parseArger opt directory "subdirectory in src/app/api"
# @parseArger opt schema "input/output validation"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_methods=()
_arg_directory=
_arg_schema=
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "I send an SOS to the world:"
	echo -e "	name: route name"
	echo -e "	--methods <methods>: HTTP methods (GET,POST,PUT,DELETE), repeatable"
	echo -e "	--directory <directory>: subdirectory in src/app/api"
	echo -e "	--schema <schema>: input/output validation"
	echo -e "Usage :
	$0 <name> [--methods <value>] [--directory <value>] [--schema <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="[0;31m";
				;;
			-2)
				_arg_COLOR="[0;33m";
				;;
			-1)
				_arg_COLOR="[1;33m";
				;;
			1)
				_arg_COLOR="[0;32m";
				;;
			2)
				_arg_COLOR="[1;36m";
				;;
			3)
				_arg_COLOR="[0;36m";
				;;
			*)
				_arg_COLOR="[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--methods)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_methods+=("$2")
				shift
				;;
			--methods=*)
				_arg_methods+=("${_key##--methods=}")
				;;
			
			--directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			
			--schema)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_schema="$2"
				shift
				;;
			--schema=*)
				_arg_schema="${_key##--schema=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').
	${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	methods: ${_arg_methods[*]}";
	echo -e "	directory: ${_arg_directory}";
	echo -e "	schema: ${_arg_schema}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common"

if [ "$(is_butT3r_project)" = "1" ]; then
  die "${PWD} is not a ButT3r project" -2
fi

# Get the target directory
target_dir="${_arg_directory:-"src/app/api"}"
mkdir -p "$target_dir"

# Create the route file
route_file="$target_dir/$_arg_name/route.ts"
mkdir -p "$(dirname "$route_file")"

# Generate the API route code
{
  echo "import { NextRequest, NextResponse } from 'next/server'"
  if [ -n "$_arg_schema" ]; then
    echo "import { z } from 'zod'"
    echo
    echo "// Input validation schema"
    echo "const inputSchema = z.object({
  // TODO: Add your schema validation here
})"
    echo
    echo "// Output validation schema"
    echo "const outputSchema = z.object({
  // TODO: Add your schema validation here
})"
    echo
  fi

  for method in "${_arg_methods[@]}"; do
    echo "export async function $method(req: NextRequest) {"
    echo "  try {"
    if [ -n "$_arg_schema" ]; then
      echo "    // Validate input"
      echo "    const input = await inputSchema.parseAsync(await req.json())"
      echo
    fi
    echo "    // TODO: Implement $method logic here"
    echo
    if [ -n "$_arg_schema" ]; then
      echo "    // Validate output"
      echo "    const response = outputSchema.parse({
      // TODO: Add your response data here
    })"
      echo
    fi
    echo "    return NextResponse.json({
      // TODO: Add your response data here
    })"
    echo "  } catch (error) {"
    echo "    return NextResponse.json("
    echo "      { error: error instanceof Error ? error.message : 'Unknown error' },"
    echo "      { status: 400 }"
    echo "    )"
    echo "  }"
    echo "}"
    echo
  done
} > "$route_file"

log "Created API route at $route_file" 1
