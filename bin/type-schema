#!/bin/bash
# @parseArger-begin
# @parseArger-help "generate type schema" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos type "type of schema" --one-of "props" --one-of "form" --one-of "api"
# @parseArger pos target "target file"
# @parseArger opt props "property definitions" --repeat
# @parseArger opt form "field definitions with validation" --repeat
# @parseArger opt api "input/output fields" --repeat
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_type="";
_one_of_arg_type=("props" "form" "api" );
_arg_target="";
# OPTIONALS ARGUMENTS
_arg_props=()
_arg_form=()
_arg_api=()
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "generate type schema:"
	echo -e "	type: type of schema [one of 'props' 'form' 'api']"
	echo -e "	target: target file"
	echo -e "	--props <props>: property definitions, repeatable"
	echo -e "	--form <form>: field definitions with validation, repeatable"
	echo -e "	--api <api>: input/output fields, repeatable"
	echo -e "Usage :
	$0 <type> <target> [--props <value>] [--form <value>] [--api <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--props)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_props+=("$2")
				shift
				;;
			--props=*)
				_arg_props+=("${_key##--props=}")
				;;
			
			--form)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_form+=("$2")
				shift
				;;
			--form=*)
				_arg_form+=("${_key##--form=}")
				;;
			
			--api)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_api+=("$2")
				shift
				;;
			--api=*)
				_arg_api+=("${_key##--api=}")
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="type target"
	if [ "${_positionals_count}" -gt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_type _arg_target ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	type: ${_arg_type}";
	echo -e "	target: ${_arg_target}";
	echo -e "	props: ${_arg_props[*]}";
	echo -e "	form: ${_arg_form[*]}";
	echo -e "	api: ${_arg_api[*]}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common"

if [ "$(is_butT3r_project)" = "1" ]; then
  die "${PWD} is not a ButT3r project" -2
fi

# Create schema file if it doesn't exist
if [ ! -f "$_arg_target" ]; then
  mkdir -p "$(dirname "$_arg_target")"
  echo "import { z } from 'zod'" > "$_arg_target"
fi

# Generate schema based on type
case "$_arg_type" in
  "props")
    {
      echo
      echo "export const ${_arg_target%.*}Schema = z.object({"
      for prop in "${_arg_props[@]}"; do
        IFS=':' read -r name type <<< "$prop"
        echo "  $name: z.$type,"
      done
      echo "})"
      echo
      echo "export type ${_arg_target%.*}Type = z.infer<typeof ${_arg_target%.*}Schema>"
    } >> "$_arg_target"
    ;;
    
  "form")
    {
      echo
      echo "export const ${_arg_target%.*}Schema = z.object({"
      for field in "${_arg_form[@]}"; do
        IFS=':' read -r name validation <<< "$field"
        echo "  $name: z.$validation,"
      done
      echo "})"
      echo
      echo "export type ${_arg_target%.*}Type = z.infer<typeof ${_arg_target%.*}Schema>"
    } >> "$_arg_target"
    ;;
    
  "api")
    {
      echo
      echo "export const ${_arg_target%.*}InputSchema = z.object({"
      for field in "${_arg_api[@]}"; do
        if [[ "$field" == input:* ]]; then
          field="${field#input:}"
          IFS=':' read -r name type <<< "$field"
          echo "  $name: z.$type,"
        fi
      done
      echo "})"
      echo
      echo "export const ${_arg_target%.*}OutputSchema = z.object({"
      for field in "${_arg_api[@]}"; do
        if [[ "$field" == output:* ]]; then
          field="${field#output:}"
          IFS=':' read -r name type <<< "$field"
          echo "  $name: z.$type,"
        fi
      done
      echo "})"
      echo
      echo "export type ${_arg_target%.*}Input = z.infer<typeof ${_arg_target%.*}InputSchema>"
      echo "export type ${_arg_target%.*}Output = z.infer<typeof ${_arg_target%.*}OutputSchema>"
    } >> "$_arg_target"
    ;;
esac

log "Generated schema in $_arg_target" 1
