#!/bin/bash
# @parseArger-begin
# @parseArger-help "my go to project creator" --option "help" --short-option "h"
# @parseArger-version "0.0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos name "project name"
# @parseArger opt db-provider "db provider" --default-value "sqlite"
# @parseArger opt db-orm "orm to use" --default-value "drizzle"
# @parseArger opt shadcn-component "shadcn component to install" --repeat
# @parseArger opt install "package to install" --repeat
# @parseArger opt package-manager "package manager" --default-value "bun"
# @parseArger flag db "project use a DB" --on
# @parseArger flag app-router "use app router" --on
# @parseArger flag auth "use nextauth" --on
# @parseArger flag trpc "use trpc" --on
# @parseArger flag tailwind "use tailwind" --on
# @parseArger flag shadcn "project use shadcn" --on
# @parseArger flag mdx "project use markdown content"
# @parseArger flag mdx-remote "add next remote mdx and gray-matter" --on
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_db_provider="sqlite"
_arg_db_orm="drizzle"
_arg_shadcn_component=()
_arg_install=()
_arg_package_manager="bun"
# FLAGS
_arg_db="on"
_arg_app_router="on"
_arg_auth="on"
_arg_trpc="on"
_arg_tailwind="on"
_arg_shadcn="on"
_arg_mdx="off"
_arg_mdx_remote="on"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "my go to project creator:"
	echo -e "	name: project name"
	echo -e "	--db-provider <db-provider>: db provider [default: ' sqlite ']"
	echo -e "	--db-orm <db-orm>: orm to use [default: ' drizzle ']"
	echo -e "	--shadcn-component <shadcn-component>: shadcn component to install, repeatable"
	echo -e "	--install <install>: package to install, repeatable"
	echo -e "	--package-manager <package-manager>: package manager [default: ' bun ']"
	echo -e "	--db|--no-db: project use a DB, on by default (use --no-db to turn it off)"
	echo -e "	--app-router|--no-app-router: use app router, on by default (use --no-app-router to turn it off)"
	echo -e "	--auth|--no-auth: use nextauth, on by default (use --no-auth to turn it off)"
	echo -e "	--trpc|--no-trpc: use trpc, on by default (use --no-trpc to turn it off)"
	echo -e "	--tailwind|--no-tailwind: use tailwind, on by default (use --no-tailwind to turn it off)"
	echo -e "	--shadcn|--no-shadcn: project use shadcn, on by default (use --no-shadcn to turn it off)"
	echo -e "	--mdx|--no-mdx: project use markdown content"
	echo -e "	--mdx-remote|--no-mdx-remote: add next remote mdx and gray-matter, on by default (use --no-mdx-remote to turn it off)"
	echo -e "Usage :
	$0 <name> [--db-provider <value>] [--db-orm <value>] [--shadcn-component <value>] [--install <value>] [--package-manager <value>] [--[no-]db] [--[no-]app-router] [--[no-]auth] [--[no-]trpc] [--[no-]tailwind] [--[no-]shadcn] [--[no-]mdx] [--[no-]mdx-remote]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--db-provider)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_db_provider="$2"
				shift
				;;
			--db-provider=*)
				_arg_db_provider="${_key##--db-provider=}"
				;;
			
			--db-orm)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_db_orm="$2"
				shift
				;;
			--db-orm=*)
				_arg_db_orm="${_key##--db-orm=}"
				;;
			
			--shadcn-component)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_shadcn_component+=("$2")
				shift
				;;
			--shadcn-component=*)
				_arg_shadcn_component+=("${_key##--shadcn-component=}")
				;;
			
			--install)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_install+=("$2")
				shift
				;;
			--install=*)
				_arg_install+=("${_key##--install=}")
				;;
			
			--package-manager)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_package_manager="$2"
				shift
				;;
			--package-manager=*)
				_arg_package_manager="${_key##--package-manager=}"
				;;
			
			--db)
				_arg_db="on"
				;;
			--no-db)
				_arg_db="off"
				;;
			--app-router)
				_arg_app_router="on"
				;;
			--no-app-router)
				_arg_app_router="off"
				;;
			--auth)
				_arg_auth="on"
				;;
			--no-auth)
				_arg_auth="off"
				;;
			--trpc)
				_arg_trpc="on"
				;;
			--no-trpc)
				_arg_trpc="off"
				;;
			--tailwind)
				_arg_tailwind="on"
				;;
			--no-tailwind)
				_arg_tailwind="off"
				;;
			--shadcn)
				_arg_shadcn="on"
				;;
			--no-shadcn)
				_arg_shadcn="off"
				;;
			--mdx)
				_arg_mdx="on"
				;;
			--no-mdx)
				_arg_mdx="off"
				;;
			--mdx-remote)
				_arg_mdx_remote="on"
				;;
			--no-mdx-remote)
				_arg_mdx_remote="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	db-provider: ${_arg_db_provider}";
	echo -e "	db-orm: ${_arg_db_orm}";
	echo -e "	shadcn-component: ${_arg_shadcn_component[*]}";
	echo -e "	install: ${_arg_install[*]}";
	echo -e "	package-manager: ${_arg_package_manager}";
	echo -e "	db: ${_arg_db}";
	echo -e "	app-router: ${_arg_app_router}";
	echo -e "	auth: ${_arg_auth}";
	echo -e "	trpc: ${_arg_trpc}";
	echo -e "	tailwind: ${_arg_tailwind}";
	echo -e "	shadcn: ${_arg_shadcn}";
	echo -e "	mdx: ${_arg_mdx}";
	echo -e "	mdx-remote: ${_arg_mdx_remote}";

}


print_version()
{
	echo "0.0.1";
}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# Define package manager commands
case "${_arg_package_manager}" in
    "bun")
        installCmd=("bun" "add");
        execCmd=("bun" "x");
        ;;
    "npm")
        installCmd=("npm" "install");
        execCmd=("npm" "run");
        ;;
    "pnpm") 
        installCmd=("pnpm" "add");
        execCmd=("pnpm" "dlx");
        ;;
    "yarn")
        installCmd=("yarn" "add");
        execCmd=("yarn" "dlx");
        ;;
    "deno")
        installCmd=("deno" "install");
        execCmd=("deno" "run");
        ;;
    *)
        installCmd=("${_arg_package_manager}" "install");
        execCmd=("npx");
        ;;
esac

# Build command array with base components
cmd=(
    "${_arg_package_manager}"
    "create"
    "t3-app@latest"
    "${_arg_name}"
    "--CI"
);

# Add optional features based on flags
if [ "${_arg_auth}" = "on" ]; then
	cmd+=("--nextAuth");
fi

if [ "${_arg_trpc}" = "on" ]; then
	cmd+=("--trpc");
fi

if [ "${_arg_db}" = "on" ]; then
	cmd+=(
		"--${_arg_db_orm}"
		"--dbProvider"
		"${_arg_db_provider}"
	);
fi

if [ "${_arg_app_router}" = "on" ]; then
	cmd+=("--appRouter");
fi

if [ "${_arg_tailwind}" = "on" ]; then
	cmd+=("--tailwind");
fi

# Execute the command
"${cmd[@]}";
# echo "${cmd[*]}";

# Check if project directory exists
if [ ! -d "${_arg_name}" ]; then
	die "Project directory ${_arg_name} was not created" 1;
fi

# Change into the project directory
cd "${_arg_name}" || die "Failed to change into project directory to ${_arg_name}" 1;

# Install shadcn if enabled
if [ "${_arg_shadcn}" = "on" ]; then
	# Initialize shadcn
	"${execCmd[@]}" shadcn@latest init -y;
	# Install specified shadcn components if any were provided
	if [ ${#_arg_shadcn_component[@]} -gt 0 ]; then
		"${execCmd[@]}" shadcn@latest add "${_arg_shadcn_component[@]}";
	fi
fi

# Install specified packages if any were provided
if [ ${#_arg_install[@]} -gt 0 ]; then
	"${installCmd[@]}" add "${_arg_install[@]}";
fi

# Install and configure MDX if enabled
if [ "${_arg_mdx}" = "on" ]; then
	# Install MDX dependencies
	mdxDeps=("@next/mdx" "@mdx-js/loader" "@mdx-js/react");
	if [ "${_arg_mdx_remote}" = "on" ]; then
		mdxDeps+=("next-mdx-remote" "gray-matter");
	fi
	"${installCmd[@]}" add "${mdxDeps[@]}";

	# Create mdx-components.tsx file
	cat >"./src/components/mdx-components.tsx" <<'EOL'
import type { MDXComponents } from 'mdx/types'
 
export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}
EOL

	# Update next.config.js to support MDX
	cat >"./next.config.mjs" <<'EOL'
import createMDX from '@next/mdx'
 
/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'mdx', 'md', 'ts', 'tsx'],
}
 
const withMDX = createMDX({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})
 
export default withMDX(nextConfig)
EOL
fi
