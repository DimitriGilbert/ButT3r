#!/bin/bash
# @parseArger-begin
# @parseArger-help "initialize the stack for the first time" --option "help" --short-option "h"
# @parseArger-version "0.0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger opt containerd "what container are you using" --default-value "docker" --one-of "docker" --one-of "podman"
# @parseArger opt runner "what js runtime is used" --default-value "bun" --one-of "bun" --one-of "npm" --one-of "yarn"
# @parseArger flag dev "initialize in dev mode"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
# OPTIONALS ARGUMENTS
_arg_containerd="docker"
_one_of_arg_containerd=("docker" "podman" );
_arg_runner="bun"
_one_of_arg_runner=("bun" "npm" "yarn" );
# FLAGS
_arg_dev="off"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "initialize the stack for the first time:"
	echo -e "	--containerd <containerd>: what container are you using [default: ' docker '] [one of 'docker' 'podman']"
	echo -e "	--runner <runner>: what js runtime is used [default: ' bun '] [one of 'bun' 'npm' 'yarn']"
	echo -e "	--dev|--no-dev: initialize in dev mode"
	echo -e "Usage :
	$0 [--containerd <value>] [--runner <value>] [--[no-]dev]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--containerd)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_containerd="$2"
				if [[ "${#_one_of_arg_containerd[@]}" -gt 0 ]];then [[ "${_one_of_arg_containerd[*]}" =~ (^|[[:space:]])"$_arg_containerd"($|[[:space:]]) ]] || die "containerd must be one of: docker podman";fi
				shift
				;;
			--containerd=*)
				_arg_containerd="${_key##--containerd=}"
				if [[ "${#_one_of_arg_containerd[@]}" -gt 0 ]];then [[ "${_one_of_arg_containerd[*]}" =~ (^|[[:space:]])"$_arg_containerd"($|[[:space:]]) ]] || die "containerd must be one of: docker podman";fi
				;;
			
			--runner)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_runner="$2"
				if [[ "${#_one_of_arg_runner[@]}" -gt 0 ]];then [[ "${_one_of_arg_runner[*]}" =~ (^|[[:space:]])"$_arg_runner"($|[[:space:]]) ]] || die "runner must be one of: bun npm yarn";fi
				shift
				;;
			--runner=*)
				_arg_runner="${_key##--runner=}"
				if [[ "${#_one_of_arg_runner[@]}" -gt 0 ]];then [[ "${_one_of_arg_runner[*]}" =~ (^|[[:space:]])"$_arg_runner"($|[[:space:]]) ]] || die "runner must be one of: bun npm yarn";fi
				;;
			
			--dev)
				_arg_dev="on"
				;;
			--no-dev)
				_arg_dev="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	containerd: ${_arg_containerd}";
	echo -e "	runner: ${_arg_runner}";
	echo -e "	dev: ${_arg_dev}";

}


print_version()
{
	echo "0.0.1";
}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common";

function init_docker() {
  local _upCmd=("$1")

  if [ "$1" = "docker" ]; then
    _upCmd+=(compose)
  elif [ "$1" = "podman" ]; then
    _upCmd[0]="podman-compose"
  fi

	if { [ "$_arg_dev" = "on" ] || [ ! -f "docker-compose.yml" ]; } && [ -f "docker-compose.dev.yml" ]; then
		_upCmd+=(-f "docker-compose.dev.yml")
	else
		_upCmd+=(-f "docker-compose.yml")
	fi

  if [ "$_arg_dev" = "on" ] && [ -f "docker-compose.dev.yml" ]; then
    log "Using development compose configuration" 1
    _upCmd+=(-f "docker-compose.dev.yml");
  fi

  _upCmd+=(build);
  "${_upCmd[@]}";

  # Start the services after build
  start_compose "$_arg_dev" "$1";
}

if [ "$(is_butT3r_project)" = "1" ]; then
  die "${PWD} is not a ButT3r project" -2
fi

if [ "$(is_using_docker)" = "0" ]; then
  log "Checking $_arg_containerd environment..." 1
  if [ "$(check_runtime "$_arg_containerd")" != "0" ]; then
    die "$_arg_containerd is not running or not installed" -2
  fi

  log "Building and initializing $_arg_containerd services..." 1
  init_docker "$_arg_containerd";
else
  log "Initializing native environment..." 1

  # Install dependencies based on the runner
  if [ "$_arg_runner" = "bun" ]; then
    log "Installing dependencies with bun..." 1
    bun install
    if [ "$_arg_dev" = "on" ]; then
      bun run dev &
      echo $! >.stackpid;
    else
      bun run build;
      bun run start &
      echo $! >.stackpid;
    fi
  elif [ "$_arg_runner" = "npm" ]; then
    log "Installing dependencies with npm..." 1
    npm install;
    if [ "$_arg_dev" = "on" ]; then
      npm run dev &
      echo $! >.stackpid;
    else
      npm run build;
      npm run start &
      echo $! >.stackpid;
    fi
  elif [ "$_arg_runner" = "yarn" ]; then
    log "Installing dependencies with yarn..." 1
    yarn install;
    if [ "$_arg_dev" = "on" ]; then
      yarn dev &
      echo $! >.stackpid;
    else
      yarn build;
      yarn start &
      echo $! >.stackpid;
    fi
  fi
fi
