#!/bin/bash

if ! declare -f add_function > /dev/null; then
  source "$(dirname "${BASH_SOURCE[0]}")/../_ts-edit/common"
fi

function write_component_function() {
  local component_name="$1"
  local body="$2"
  shift 2
  local props=("$@")
  local output=""

  # If we have props, create Props type first
  if [ "${#props[@]}" -gt 0 ]; then
    output+="$(write_props_interface "$component_name" "${props[@]}")\n\n"
    # Extract prop names for destructuring
    local props_list=""
    for prop in "${props[@]}"; do
      local prop_name="${prop%%:*}"
      if [ -z "$props_list" ]; then
        props_list="$prop_name"
      else
        props_list="$props_list, $prop_name"
      fi
    done
    output+="$(add_function "$component_name" "JSX.Element" "" "{ $props_list }: ${component_name}Props" "$body")"
  else
    output+="$(add_function "$component_name" "JSX.Element" "" "()" "$body")"
  fi
  echo -e "$output"
}

function create_component() {
  local component_name="$1"
  local emmet="$2"
  shift 2
  local props=("$@")

  # Create component with emmet-parsed body
  local parsed_emmet
  if [ -n "$emmet" ]; then
    parsed_emmet=$(parse_emmet "$emmet")
  else
    parsed_emmet="<div>{/* TODO: implement $component_name */}</div>"
  fi

  write_component_function "$component_name" "return ($parsed_emmet);" "${props[@]}"
}

function update_component() {
  local target_file="$1"
  local temp_file="$2"
  local component_name="$3"
  local client_mode="$4"
  local emmet="${5:-}"
  shift 5
  local props=("$@")

  # Create temporary file if not exists
  if [ ! -f "$temp_file" ]; then
    # Preserve existing imports and directives
    if [ "$client_mode" = "on" ] && ! grep -q "'use client';" "$target_file"; then
      echo "'use client';" > "$temp_file"
      echo "" >> "$temp_file"
      cat "$target_file" >> "$temp_file"
    else
      cp "$target_file" "$temp_file"
    fi
  fi

  # Remove existing component definition
  sed -i "/^export.*function.*${component_name}/,/^}/d" "$temp_file"
  sed -i "/^export.*interface.*${component_name}Props/,/^}/d" "$temp_file"

  # Create updated component
  create_component "$temp_file" "$component_name" "$emmet" "${props[@]}"
}
