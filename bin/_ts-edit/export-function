#!/bin/bash
# @parseArger-begin
# @parseArger-help "export a function" --option "help" --short-option "h"
# @parseArger-version "0.0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos name "function name"
# @parseArger opt props "function props (name:type)" --repeat
# @parseArger opt return-type "function return type" --default-value "void"
# @parseArger flag async "is async function"
# @parseArger flag dry-run "output to stdout"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_props=()
_arg_return_type="void"
# FLAGS
_arg_async="off"
_arg_dry_run="off"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "export a function:"
	echo -e "	name: function name"
	echo -e "	--props <props>: function props (name:type), repeatable"
	echo -e "	--return-type <return-type>: function return type [default: ' void ']"
	echo -e "	--async|--no-async: is async function"
	echo -e "	--dry-run|--no-dry-run: output to stdout"
	echo -e "Usage :
	$0 <name> [--props <value>] [--return-type <value>] [--[no-]async] [--[no-]dry-run]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--props)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_props+=("$2")
				shift
				;;
			--props=*)
				_arg_props+=("${_key##--props=}")
				;;
			
			--return-type)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_return_type="$2"
				shift
				;;
			--return-type=*)
				_arg_return_type="${_key##--return-type=}"
				;;
			
			--async)
				_arg_async="on"
				;;
			--no-async)
				_arg_async="off"
				;;
			--dry-run)
				_arg_dry_run="on"
				;;
			--no-dry-run)
				_arg_dry_run="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	props: ${_arg_props[*]}";
	echo -e "	return-type: ${_arg_return_type}";
	echo -e "	async: ${_arg_async}";
	echo -e "	dry-run: ${_arg_dry_run}";

}


print_version()
{
	echo "0.0.1";
}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common"

# Find the target TypeScript file
target_file=$(find_target_file)
if [ -z "$target_file" ]; then
  die "No TypeScript file found in current directory" -2
fi

# Prepare async prefix if needed
async_prefix=""
if [ "$_arg_async" = "on" ]; then
  async_prefix="async "
fi

# Generate the function definition
fn_def=$(add_function "$_arg_name" "$_arg_return_type" "$async_prefix" "${_arg_props[@]}")

# Write to file
if [ "$_arg_dry_run" = "on" ]; then
  echo -e "\n$fn_def"
else
  echo -e "\n$fn_def" >> "$target_file"
fi
