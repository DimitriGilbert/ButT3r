#!/bin/bash

function find_target_file() {
  local current_file
  if [ -f "index.ts" ]; then
    current_file="index.ts"
  elif [ -f "index.tsx" ]; then
    current_file="index.tsx"
  else
    # Find the most recently modified .ts or .tsx file
    current_file=$(find . -maxdepth 1 -type f \( -name "*.ts" -o -name "*.tsx" \) -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" " | sed 's/^\.\///')
  fi
  echo "$current_file"
}

function add_import() {
  local file="$1"
  local from="$2"
  local what="$3"
  shift 3
  local extras=("$@")

  # Check if import already exists
  if grep -q "^import.*from[[:space:]]*['\"]${from}['\"]" "${file}"; then
    # Import from this module exists, append to it
    local extra_imports=""
    [ "${#extras[@]}" -gt 0 ] && extra_imports=", ${extras[*]}"
    sed -i "/^import.*from[[:space:]]*['\"]${from}['\"]/ s/import \(.*\) from/import \1, ${what}${extra_imports} from/" "${file}"
  else
    # Add new import at the top, after other imports
    local last_import
    last_import=$(grep -n "^import .* from .*" "${file}" | tail -1 | cut -d: -f1)
    local extra_imports=""
    [ "${#extras[@]}" -gt 0 ] && extra_imports=", ${extras[*]}"
    if [ -n "$last_import" ]; then
      sed -i "${last_import}a\\import { ${what}${extra_imports} } from '${from}'" "${file}"
    else
      # No imports yet, add at the top
      sed -i "1i\\import { ${what}${extra_imports} } from '${from}'" "${file}"
    fi
  fi
}

function add_type() {
  local name="$1"
  shift 1
  local properties=("$@")

  # Build the type definition with 2-space indentation
  local type_def="export type $name = {\n"
  for prop in "${properties[@]}"; do
    local prop_name="${prop%%:*}"
    local prop_type="${prop#*:}"
    type_def+="  $prop_name: ${prop_type:-any};\n"
  done
  type_def+="}"

  echo -e "$type_def"
}

function add_function() {
  local name="$1"
  local return_type="$2"
  local is_async="$3"
  local params="$4"
  local body="$5"
  local is_default="${6:-off}"

  # Build the function definition with 2-space indentation
  local fn_def=""
  if [ "$is_default" = "on" ]; then
    fn_def="export default ${is_async}function $name($params): ${return_type:-void} {\n"
  else
    fn_def="export ${is_async}function $name($params): ${return_type:-void} {\n"
  fi
  
  if [ -n "$body" ]; then
    fn_def+="  $body\n"
  else
    fn_def+="  // TODO: implement $name\n"
  fi
  fn_def+="}"

  echo -e "$fn_def"
}

function format_component_name() {
  if [ "$1" = "" ]; then
    die "Component name is required" 1;
  fi
  local name="$1"
  # If empty, return a sensible default based on the context
  # First, replace all non-alphanumeric characters with spaces
  name=$(echo "$name" | sed 's/[^[:alnum:]]/ /g')
  # Convert accented characters to their basic form
  name=$(echo "$name" | iconv -f utf8 -t ascii//TRANSLIT)
  # Remove any remaining non-alphanumeric characters
  name=$(echo "$name" | tr -cd '[:alnum:] ')
  # Convert to PascalCase: trim spaces, capitalize first letter of each word, remove spaces
  name=$(echo "$name" | awk '{$1=$1}1' | sed 's/\<./\U&/g' | tr -d ' ')
  
  echo "$name"
}

function process_page_template() {
  local name="$1"
  local file="$2"
  
  # Add required imports
  add_import "$file" "next/navigation" "useRouter usePathname useSearchParams"
  add_import "$file" "react" "Suspense"
  add_import "$file" "react-error-boundary" "ErrorBoundary"
  add_import "$file" "./loading" "Loading"
  add_import "$file" "./error" "Error"
  
  # Add base component with error boundary and suspense
  local fn_def=$(add_function "$file" "$name" "JSX.Element" "" "return (
    <ErrorBoundary FallbackComponent={Error}>
      <Suspense fallback={<Loading />}>
        <div>
          <h1>${name}</h1>
          {/* Add your page content here */}
        </div>
      </Suspense>
    </ErrorBoundary>
  )")
  echo -e "\n$fn_def" >> "$file"
}

function process_layout_template() {
  local name="$1"
  local file="$2"
  
  # Add required imports
  add_import "$file" "next/metadata" "Metadata"
  add_import "$file" "next/headers" "headers"
  add_import "$file" "./metadata" "getMetadata"
  
  # Add metadata export
  echo -e "\nexport const metadata: Metadata = getMetadata()" >> "$file"
  
  # Add layout component
  local fn_def=$(add_function "$file" "$name" "JSX.Element" "" "return (
    <div className=\"layout-container\">
      {/* Add your layout structure here */}
      {props.children}
    </div>
  )" "children: React.ReactNode")
  echo -e "\n$fn_def" >> "$file"
}

function process_form_template() {
  local name="$1"
  local file="$2"
  
  # Add required imports
  add_import "$file" "react-hook-form" "useForm"
  add_import "$file" "@hookform/resolvers/zod" "zodResolver"
  add_import "$file" "./schema" "formSchema FormData"
  
  # Add form component
  local fn_def=$(add_function "$file" "$name" "JSX.Element" "" "const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {},
  });

  const onSubmit = async (data: FormData) => {
    // Add your form submission logic here
    console.log(data);
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">
      {/* Add your form fields here */}
      <button type=\"submit\" className=\"btn-primary\">
        Submit
      </button>
    </form>
  )")
  echo -e "\n$fn_def" >> "$file"
}

function process_table_template() {
  local name="$1"
  local file="$2"
  
  # Add required imports
  add_import "$file" "@tanstack/react-table" "useReactTable getCoreRowModel getPaginationRowModel flexRender"
  add_import "$file" "./columns" "columns"
  add_import "$file" "./types" "TableData"
  
  # Add table component
  local fn_def=$(add_function "$file" "$name" "JSX.Element" "" "const [data, setData] = React.useState<TableData[]>([]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  });

  return (
    <div className=\"overflow-x-auto\">
      <table className=\"min-w-full table-auto\">
        <thead>
          {table.getHeaderGroups().map(headerGroup => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map(header => (
                <th key={header.id}>
                  {flexRender(
                    header.column.columnDef.header,
                    header.getContext()
                  )}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody>
          {table.getRowModel().rows.map(row => (
            <tr key={row.id}>
              {row.getVisibleCells().map(cell => (
                <td key={cell.id}>
                  {flexRender(
                    cell.column.columnDef.cell,
                    cell.getContext()
                  )}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
      <div className=\"flex items-center justify-end space-x-2 py-4\">
        <button
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
          className=\"btn-secondary\"
        >
          Previous
        </button>
        <button
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
          className=\"btn-secondary\"
        >
          Next
        </button>
      </div>
    </div>
  )")
  echo -e "\n$fn_def" >> "$file"
}

function generate_api_route() {
  local name="$1"
  local file="$2"
  local methods=("$3")
  
  # Add required imports
  add_import "$file" "next/server" "NextRequest NextResponse"
  
  # Add API route handlers for each method
  for method in "${methods[@]}"; do
    local method_lower=$(echo "$method" | tr '[:upper:]' '[:lower:]')
    add_function "$file" "$method_lower" "Promise<NextResponse>" "async" "const req = await request.json();
    
    try {
      // Add your $method_lower logic here
      return NextResponse.json({ message: 'Success' });
    } catch (error) {
      return NextResponse.json(
        { error: error instanceof Error ? error.message : 'Unknown error' },
        { status: 500 }
      );
    }" "request: NextRequest"
  done
}

function generate_trpc_procedure() {
  local name="$1"
  local file="$2"
  local procedure_type="$3"
  local input_schema="$4"
  
  # Add required imports
  add_import "$file" "@trpc/server" "router procedure"
  add_import "$file" "zod" "z"
  
  # Add input schema if provided
  if [ -n "$input_schema" ]; then
    echo -e "\nexport const ${name}Schema = z.object($input_schema);" >> "$file"
  fi
  
  # Add procedure based on type
  case "$procedure_type" in
    "query")
      echo -e "\nexport const ${name} = procedure
        ${input_schema:+.input(${name}Schema)}
        .query(async ({ input, ctx }) => {
          // Add your query logic here
          return {};
        });" >> "$file"
      ;;
    "mutation")
      echo -e "\nexport const ${name} = procedure
        ${input_schema:+.input(${name}Schema)}
        .mutation(async ({ input, ctx }) => {
          // Add your mutation logic here
          return {};
        });" >> "$file"
      ;;
    "infinite")
      echo -e "\nexport const ${name} = procedure
        ${input_schema:+.input(${name}Schema)}
        .query(async ({ input, ctx }) => {
          const limit = 10;
          const items = [];
          const nextCursor = null;
          
          return {
            items,
            nextCursor,
          };
        });" >> "$file"
      ;;
  esac
}

function add_query_loader() {
  local name="$1"
  local file="$2"
  local router_name="$3"
  
  # Add required imports
  add_import "$file" "@/server/api/routers/${router_name}" "${name}"
  add_import "$file" "@/utils/api" "api"
  
  # Add query hook
  echo -e "\nexport function use${name}Query(${name}Input?: z.infer<typeof ${name}Schema>) {
    return api.${router_name}.${name}.useQuery(${name}Input);
  }" >> "$file"
}

function add_mutation_loader() {
  local name="$1"
  local file="$2"
  local router_name="$3"
  
  # Add required imports
  add_import "$file" "@/server/api/routers/${router_name}" "${name}"
  add_import "$file" "@/utils/api" "api"
  
  # Add mutation hook
  echo -e "\nexport function use${name}Mutation() {
    return api.${router_name}.${name}.useMutation();
  }" >> "$file"
}

function add_infinite_loader() {
  local name="$1"
  local file="$2"
  local router_name="$3"
  
  # Add required imports
  add_import "$file" "@/server/api/routers/${router_name}" "${name}"
  add_import "$file" "@/utils/api" "api"
  
  # Add infinite query hook
  echo -e "\nexport function use${name}InfiniteQuery(${name}Input?: z.infer<typeof ${name}Schema>) {
    return api.${router_name}.${name}.useInfiniteQuery(${name}Input);
  }" >> "$file"
}

function generate_props_schema() {
  local name="$1"
  local file="$2"
  local props=("$3")
  
  # Add required imports
  add_import "$file" "zod" "z"
  
  # Build schema
  local schema="export const ${name}Schema = z.object({\n"
  for prop in "${props[@]}"; do
    local prop_name="${prop%%:*}"
    local prop_type="${prop#*:}"
    schema+="  $prop_name: z.${prop_type},\n"
  done
  schema+="});\n\nexport type ${name} = z.infer<typeof ${name}Schema>;"
  
  echo -e "\n$schema" >> "$file"
}

function generate_form_schema() {
  local name="$1"
  local file="$2"
  local fields=("$3")
  
  # Add required imports
  add_import "$file" "zod" "z"
  
  # Build schema
  local schema="export const ${name}Schema = z.object({\n"
  for field in "${fields[@]}"; do
    local field_name="${field%%:*}"
    local field_type="${field#*:}"
    local validation="${field##*|}"
    schema+="  $field_name: z.${field_type}"
    if [ "$validation" != "$field_type" ]; then
      schema+=".$validation"
    fi
    schema+=",\n"
  done
  schema+="});\n\nexport type ${name}FormData = z.infer<typeof ${name}Schema>;"
  
  echo -e "\n$schema" >> "$file"
}

function generate_api_schema() {
  local name="$1"
  local file="$2"
  local input_fields=("$3")
  local output_fields=("$4")
  
  # Add required imports
  add_import "$file" "zod" "z"
  
  # Build input schema
  local input_schema="export const ${name}InputSchema = z.object({\n"
  for field in "${input_fields[@]}"; do
    local field_name="${field%%:*}"
    local field_type="${field#*:}"
    input_schema+="  $field_name: z.${field_type},\n"
  done
  input_schema+="});\n"
  
  # Build output schema
  local output_schema="export const ${name}OutputSchema = z.object({\n"
  for field in "${output_fields[@]}"; do
    local field_name="${field%%:*}"
    local field_type="${field#*:}"
    output_schema+="  $field_name: z.${field_type},\n"
  done
  output_schema+="});\n\n"
  
  # Add type exports
  local types="export type ${name}Input = z.infer<typeof ${name}InputSchema>;
export type ${name}Output = z.infer<typeof ${name}OutputSchema>;"
  
  echo -e "\n$input_schema\n$output_schema$types" >> "$file"
}

function generate_unit_test() {
  local name="$1"
  local file="$2"
  local test_type="$3"
  
  # Add required imports
  add_import "$file" "@testing-library/react" "render screen"
  add_import "$file" "@testing-library/jest-dom" ""
  add_import "$file" "@/components/${test_type}" "${name}"
  
  # Build test suite
  local test_suite="describe('${name}', () => {
  it('renders without crashing', () => {
    render(<${name} />);
    expect(screen.getByRole('${test_type}')).toBeInTheDocument();
  });

  it('matches snapshot', () => {
    const { container } = render(<${name} />);
    expect(container).toMatchSnapshot();
  });

  // Add more test cases here
});"
  
  echo -e "\n$test_suite" >> "$file"
}

function generate_e2e_test() {
  local name="$1"
  local file="$2"
  local test_type="$3"
  
  # Add required imports
  add_import "$file" "@playwright/test" "test expect"
  
  # Build test suite
  local test_suite="test.describe('${name}', () => {
  test('should render correctly', async ({ page }) => {
    await page.goto('/${test_type}/${name}');
    await expect(page.getByRole('${test_type}')).toBeVisible();
  });

  test('should handle interactions', async ({ page }) => {
    await page.goto('/${test_type}/${name}');
    // Add interaction tests here
  });

  // Add more test cases here
});"
  
  echo -e "\n$test_suite" >> "$file"
}

function run_prettier() {
  local input="$1"
  local runner
  runner=$(get_runner)
  local cmd_prefix

  case "$runner" in
    "bun")
      cmd_prefix="bun x"
      ;;
    "yarn")
      cmd_prefix="yarn"
      ;;
    *)
      cmd_prefix="npx"
      ;;
  esac

  # If input is a file, format it; if it's a string, return the formatted string
  if [[ -f "$input" ]]; then
    # Try to run prettier on the file, if it fails return an error message
    if $cmd_prefix prettier --write "$input" 2>/dev/null; then
      echo "Formatted $input successfully."
    else
      return 1
    fi
  else
    # Format the string input and return it
    local formatted
    if formatted=$(echo -e "$input" | $cmd_prefix prettier --parser typescript --stdin 2>/dev/null); then
      echo "$formatted";
    else
      echo ""
      return 1
    fi
  fi
}
