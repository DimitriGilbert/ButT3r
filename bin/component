#!/bin/bash
# @parseArger-begin
# @parseArger-help "create/update a component" --option "help" --short-option "h"
# @parseArger-version "0.0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos path "path to the component"
# @parseArger opt directory "subdirectory in src/components"
# @parseArger opt component-name "component name"
# @parseArger opt props "property definition (name:type)" --repeat
# @parseArger opt import "import statement (from:what)" --repeat
# @parseArger opt emmet "emmet pattern for the component" --repeat
# @parseArger opt template "template to use (page|layout|form|table)" --one-of "page" --one-of "layout" --one-of "form" --one-of "table"
# @parseArger opt ai-emmet "description for the ai generated emmet string"
# @parseArger opt ai-provider "ai provider"
# @parseArger opt ai-model "ai model"
# @parseArger opt ai "get the ai to do something with the generated code"
# @parseArger opt ai-example "example output to give to the AI" --repeat --alias eg
# @parseArger flag server "is server component" --on --no-name client
# @parseArger flag dry-run "output to stdout"
# @parseArger flag prettier "run prettier before output" --on
# @parseArger flag export-default "export component as default"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_path="";
# OPTIONALS ARGUMENTS
_arg_directory=
_arg_component_name=
_arg_props=()
_arg_import=()
_arg_emmet=()
_arg_template=
_one_of_arg_template=("page" "layout" "form" "table" );
_arg_ai_emmet=
_arg_ai_provider=
_arg_ai_model=
_arg_ai=
_arg_ai_example=()
# FLAGS
_arg_server="on"
_arg_dry_run="off"
_arg_prettier="on"
_arg_export_default="off"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "create/update a component:"
	echo -e "	path: path to the component"
	echo -e "	--directory <directory>: subdirectory in src/components"
	echo -e "	--component-name <component-name>: component name"
	echo -e "	--props <props>: property definition (name:type), repeatable"
	echo -e "	--import <import>: import statement (from:what), repeatable"
	echo -e "	--emmet <emmet>: emmet pattern for the component, repeatable"
	echo -e "	--template <template>: template to use (page|layout|form|table) [one of 'page' 'layout' 'form' 'table']"
	echo -e "	--ai-emmet <ai-emmet>: description for the ai generated emmet string"
	echo -e "	--ai-provider <ai-provider>: ai provider"
	echo -e "	--ai-model <ai-model>: ai model"
	echo -e "	--ai <ai>: get the ai to do something with the generated code"
	echo -e "	--ai-example|--eg <ai-example>: example output to give to the AI, repeatable"
	echo -e "	--server|--client: is server component, on by default (use --client to turn it off)"
	echo -e "	--dry-run|--no-dry-run: output to stdout"
	echo -e "	--prettier|--no-prettier: run prettier before output, on by default (use --no-prettier to turn it off)"
	echo -e "	--export-default|--no-export-default: export component as default"
	echo -e "Usage :
	$0 <path> [--directory <value>] [--component-name <value>] [--props <value>] [--import <value>] [--emmet <value>] [--template <value>] [--ai-emmet <value>] [--ai-provider <value>] [--ai-model <value>] [--ai <value>] [--ai-example <value>] [--[no-]server] [--[no-]dry-run] [--[no-]prettier] [--[no-]export-default]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			
			--component-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_component_name="$2"
				shift
				;;
			--component-name=*)
				_arg_component_name="${_key##--component-name=}"
				;;
			
			--props)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_props+=("$2")
				shift
				;;
			--props=*)
				_arg_props+=("${_key##--props=}")
				;;
			
			--import)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_import+=("$2")
				shift
				;;
			--import=*)
				_arg_import+=("${_key##--import=}")
				;;
			
			--emmet)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_emmet+=("$2")
				shift
				;;
			--emmet=*)
				_arg_emmet+=("${_key##--emmet=}")
				;;
			
			--template)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_template="$2"
				if [[ "${#_one_of_arg_template[@]}" -gt 0 ]];then [[ "${_one_of_arg_template[*]}" =~ (^|[[:space:]])"$_arg_template"($|[[:space:]]) ]] || die "template must be one of: page layout form table";fi
				shift
				;;
			--template=*)
				_arg_template="${_key##--template=}"
				if [[ "${#_one_of_arg_template[@]}" -gt 0 ]];then [[ "${_one_of_arg_template[*]}" =~ (^|[[:space:]])"$_arg_template"($|[[:space:]]) ]] || die "template must be one of: page layout form table";fi
				;;
			
			--ai-emmet)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai_emmet="$2"
				shift
				;;
			--ai-emmet=*)
				_arg_ai_emmet="${_key##--ai-emmet=}"
				;;
			
			--ai-provider)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai_provider="$2"
				shift
				;;
			--ai-provider=*)
				_arg_ai_provider="${_key##--ai-provider=}"
				;;
			
			--ai-model)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai_model="$2"
				shift
				;;
			--ai-model=*)
				_arg_ai_model="${_key##--ai-model=}"
				;;
			
			--ai)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai="$2"
				shift
				;;
			--ai=*)
				_arg_ai="${_key##--ai=}"
				;;
			
			--eg|--ai-example)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai_example+=("$2")
				shift
				;;
			--ai-example=*)
				_arg_ai_example+=("${_key##--ai-example=}")
				;;
			--eg=*)
				_arg_ai_example+=("${_key##--eg=}")
				;;
			
			--server)
				_arg_server="on"
				;;
			--client)
				_arg_server="off"
				;;
			--dry-run)
				_arg_dry_run="on"
				;;
			--no-dry-run)
				_arg_dry_run="off"
				;;
			--prettier)
				_arg_prettier="on"
				;;
			--no-prettier)
				_arg_prettier="off"
				;;
			--export-default)
				_arg_export_default="on"
				;;
			--no-export-default)
				_arg_export_default="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="path"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_path ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	path: ${_arg_path}";
	echo -e "	directory: ${_arg_directory}";
	echo -e "	component-name: ${_arg_component_name}";
	echo -e "	props: ${_arg_props[*]}";
	echo -e "	import: ${_arg_import[*]}";
	echo -e "	emmet: ${_arg_emmet[*]}";
	echo -e "	template: ${_arg_template}";
	echo -e "	ai-emmet: ${_arg_ai_emmet}";
	echo -e "	ai-provider: ${_arg_ai_provider}";
	echo -e "	ai-model: ${_arg_ai_model}";
	echo -e "	ai: ${_arg_ai}";
	echo -e "	ai-example: ${_arg_ai_example[*]}";
	echo -e "	server: ${_arg_server}";
	echo -e "	dry-run: ${_arg_dry_run}";
	echo -e "	prettier: ${_arg_prettier}";
	echo -e "	export-default: ${_arg_export_default}";

}


print_version()
{
	echo "0.0.1";
}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common"
source "${_SCRIPT_DIR}/_ts-edit/common"
source "${_SCRIPT_DIR}/_component/common"

# Determine the target directory
base_dir="src/components"
if [ "$_arg_directory" != "" ]; then
	base_dir="${base_dir}/${_arg_directory}"
fi

# Create the target directory if it doesn't exist
target_dir="${base_dir}/$(dirname "$_arg_path")"
# Clean up the path by removing any ./ and ensuring it's absolute
target_dir=$(realpath -m "$target_dir" | sed 's|^\./||')
if [ "$_arg_dry_run" = "off" ]; then
	mkdir -p "$target_dir"
fi

# Determine the component name
component_name="${_arg_component_name}"
if [ "$component_name" = "" ]; then
	# Use the last part of the path as component name
	component_name=$(basename "$_arg_path")
fi
component_name="$(format_component_name "$component_name")"

target_file="${target_dir}/$(basename "$_arg_path").tsx"

# Build the component content
content=""

# Add use client directive if needed
if [ "$_arg_server" = "off" ]; then
	content+="'use client';\n\n"
fi

# Add imports
for import in "${_arg_import[@]}"; do
	IFS=':' read -r from what <<<"$import"
	content+="import { $what } from '$from';\n"
done

if [ "${#_arg_import[@]}" -gt 0 ]; then
	content+="\n"
fi

_emmet=""
# First handle AI emmet generation if requested
if [ "$_arg_ai_emmet" != "" ]; then
	if [ "$AI_GENTS_DIR" != "" ]; then
		source "$AI_GENTS_DIR/src/bash/common"
		_ai_params=()

		log "Generating emmet pattern from AI description..." 1
		raw_ai_emmet_result="$("$AI_GENTS_DIR/ai" agent ask "$_SCRIPT_DIR/../butt3r.agent.yml" "${_ai_params[@]}" "#/task component_emmet;$_arg_ai_emmet")"
		mapfile -t ai_emmet_result < <(extract_code_blocks "$raw_ai_emmet_result" 1)

		if [ "${#ai_emmet_result[@]}" -gt 0 ] && [ -n "${ai_emmet_result[0]}" ]; then
			log "Successfully generated emmet pattern" 1
			_emmet="${ai_emmet_result[0]}"
		else
			log "Failed to generate emmet pattern, using default" -1
		fi
	else
		log "AI-gents not found. Install AI-gents (https://github.com/DimitriGilbert/AI-gents) to use AI features" -1
	fi
fi

# Create initial component content with the emmet pattern
component_content=$(create_component "$component_name" "$_emmet" "$_arg_export_default" "${_arg_props[@]}")
content="$component_content"

# Optionally enhance with AI if requested
if [ "$_arg_ai" != "" ]; then
	if [ "$AI_GENTS_DIR" != "" ]; then
		source "$AI_GENTS_DIR/src/bash/common"
		_ai_params=()

		log "Enhancing component with AI..." 1

		# Create a temporary file for the AI response
		ai_response_file="$(mktemp)"

		_ask_cmd=("$AI_GENTS_DIR/ai" agent ask "$_SCRIPT_DIR/../butt3r.agent.yml" "${_ai_params[@]}" "#/task component_ai;$_arg_ai\n\n$content")
		if [ "$_arg_ai_provider" != "" ]; then
			_ask_cmd+=("--provider" "$_arg_ai_provider")
		fi
		if [ "$_arg_ai_model" != "" ]; then
			_ask_cmd+=("--model" "$_arg_ai_model")
		fi
		if [ "${#_arg_ai_example[@]}" -gt 0 ]; then
			_egstr=""
			for example in "${_arg_ai_example[@]}"; do
				if [ -f "$example" ]; then
					example+="\n\`\`\`$(cat "$example")\`\`\`"
				fi
				if [ "$example" != "" ]; then
					_egstr+="$example\n"
				fi
			done
			if [ "$_egstr" != "" ]; then
				_ask_cmd+=("--system" "Follow coding style and conventions from the following example: $_egstr")
			fi
		fi

		# Run AI request synchronously with the generated component and ensure we get the full response
		# "$AI_GENTS_DIR/ai" agent ask "$_SCRIPT_DIR/../butt3r.agent.yml" "${_ai_params[@]}" "#/task component_ai;$_arg_ai\n\n$content" > "$ai_response_file"
		"${_ask_cmd[@]}" >"$ai_response_file"

		# Make sure the command completed successfully
		if [ "${PIPESTATUS[0]}" -eq 0 ]; then
			# Read and process the AI response
			raw_ai_result="$(cat "$ai_response_file")"

			# Debug log
			# log "Raw AI Response:\n$raw_ai_result" -1

			if [ -n "$raw_ai_result" ]; then
				# Extract code blocks as null-separated entries
				mapfile -t -d '' ai_result < <(extract_code_blocks "$raw_ai_result" 1)
				log "Extracted Code Blocks: ${#ai_result[@]}" -1

				if [ "${#ai_result[@]}" -gt 0 ] && [ -n "${ai_result[0]}" ]; then
					# Preserve all newlines from the code block
					content="${ai_result[0]//$'\n'/\\n}"
					content="${content%\\n}"        # Remove trailing newline if needed
					content="$(echo -e "$content")" # Convert escaped newlines to real ones
				else
					log "No valid code blocks found in AI response" -1
				fi
			else
				log "AI enhancement returned empty result" -1
			fi
		else
			log "AI request failed" -2
		fi

		# Clean up
		rm -f "$ai_response_file"
	else
		log "AI-gents not found. Install AI-gents (https://github.com/DimitriGilbert/AI-gents) to use AI features" -1
	fi
fi

# log "$content" -1

if [ "$_arg_prettier" = "on" ]; then
	content=$(run_prettier "$content" || log "Failed to format content with Prettier." -1)
fi

if [ "$_arg_dry_run" = "on" ]; then
	echo "$target_file"
	echo -e "$content"
else
	# Backup file if it exists
	if [ -f "$target_file" ]; then
		cp "$target_file" "$target_file.bak" || die "Failed to backup $target_file" 1
	fi

	echo -e "$content" >"$target_file"
fi
