#!/bin/bash
# @parseArger-begin
# @parseArger-help "generate tests" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos type "type of test" --one-of "unit" --one-of "e2e"
# @parseArger pos target "component/page to test"
# @parseArger opt directory "test directory location"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_type="";
_one_of_arg_type=("unit" "e2e" );
_arg_target="";
# OPTIONALS ARGUMENTS
_arg_directory=
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "generate tests:"
	echo -e "	type: type of test [one of 'unit' 'e2e']"
	echo -e "	target: component/page to test"
	echo -e "	--directory <directory>: test directory location"
	echo -e "Usage :
	$0 <type> <target> [--directory <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="type target"
	if [ "${_positionals_count}" -gt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_type _arg_target ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	type: ${_arg_type}";
	echo -e "	target: ${_arg_target}";
	echo -e "	directory: ${_arg_directory}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "${_SCRIPT_DIR}/common"

if [ "$(is_butT3r_project)" = "1" ]; then
  die "${PWD} is not a ButT3r project" -2
fi

# Set test directory
test_dir="${_arg_directory:-"src/__tests__"}"
if [ "$_arg_type" = "e2e" ]; then
  test_dir="${_arg_directory:-"e2e"}"
fi

mkdir -p "$test_dir"

# Create test file
test_file="$test_dir/${_arg_target}.test.ts"
mkdir -p "$(dirname "$test_file")"

case "$_arg_type" in
  "unit")
    {
      echo "import { render, screen } from '@testing-library/react'"
      echo "import userEvent from '@testing-library/user-event'"
      echo "import { describe, expect, it } from 'vitest'"
      echo "import { ${_arg_target##*/} } from '${_arg_target}'"
      echo
      echo "describe('${_arg_target##*/}', () => {"
      echo "  it('should render successfully', () => {"
      echo "    render(<${_arg_target##*/} />)"
      echo "    // TODO: Add your test assertions here"
      echo "  })"
      echo
      echo "  it('should handle user interactions', async () => {"
      echo "    const user = userEvent.setup()"
      echo "    render(<${_arg_target##*/} />)"
      echo "    // TODO: Add your interaction tests here"
      echo "  })"
      echo "})"
    } > "$test_file"
    ;;
    
  "e2e")
    {
      echo "import { test, expect } from '@playwright/test'"
      echo
      echo "test('${_arg_target} e2e test', async ({ page }) => {"
      echo "  await page.goto('/${_arg_target}')"
      echo
      echo "  // TODO: Add your e2e test steps here"
      echo "  // Example:"
      echo "  // await expect(page.getByRole('heading')).toBeVisible()"
      echo "  // await page.getByRole('button').click()"
      echo "})"
    } > "$test_file"
    ;;
esac

log "Created $_arg_type test at $test_file" 1
