2024-12-25 13:21:51 parseArger generate --output ./butt3r --help-message 'And, you thought T3 was opinionated' --pos 'target "what to do" --subcommand-directory bin --subcommand-run --subcommand-use-leftovers' --leftovers
2024-12-25 13:22:29 git ignore .cmd_history
2024-12-25 13:24:28 mkdir bin/_create
2024-12-25 13:26:27 parseArger parse bin/create --output bin/_create/t3 
2024-12-25 13:27:32 parseArger parse bin/create -i 
2024-12-25 13:32:23 parseArger parse bin/create -i --flag 'docker "create a docker compose stack" --on'
2024-12-25 13:46:44 parseArger generate --output bin/_create/docker --opt 'app-name "app name"' --opt 'app-ports "ports entry for the app" -r' --opt 'app-env "app env vars" -r' --opt 'db-ports "db ports entry" -r' --opt 'db-env "db env vars" -r' --opt 'db-user "db user"' --opt 'db-name "db name"' --opt 'app-port "ports to use for the app"'
2024-12-25 14:07:43 parseArger parse bin/_create/docker -i --opt 'network "main network name"' --opt 'db-networks "more entworks for the db" -r' --opt 'app-networks "more net for the app" -r'
2024-12-28 14:50:08 parseArger parse bin/create --opt 'app-ports "ports entry for the app" --repeat' --opt 'app-env "app env vars" --repeat' --opt 'db-ports "db ports entry" --repeat' --opt 'db-env "db env vars" --repeat'
2024-12-28 14:50:17 parseArger parse bin/create --opt 'app-ports "ports entry for the app" --repeat' --opt 'app-env "app env vars" --repeat' --opt 'db-ports "db ports entry" --repeat' --opt 'db-env "db env vars" --repeat' -i
2024-12-28 14:52:56 parseArger parse bin/create --opt 'db-user "db user"' --opt 'db-name "db name"' --opt 'app-port "ports to use for the app"' --opt 'app-network "network for the app"' -i
2024-12-28 14:53:16 parseArger parse bin/create --opt 'db-user "db user"' --opt 'db-name "db name"' --opt 'app-port "ports to use for the app"' --opt 'app-network "network for the app"' -i
2025-01-08 10:40:36 parseArger parse bin/_create/docker -i --opt 'db-type "db-type" --default-value postgres'
2025-01-08 13:07:32 parseArger generate --output bin/start --flag 'dev "start in dev mode"'
2025-01-08 13:14:45 parseArger parse -i bin/start --opt 'containerd "what container are you using" --default-value docker'
2025-01-08 13:15:16 parseArger parse -i bin/start --opt 'containerd "what container are you using" --default-value docker'
2025-01-08 13:16:56 docker stack ls
2025-01-08 13:27:26 parseArger parse -i bin/start
2025-01-08 13:38:15 parseArger parse -i bin/start --opt 'runner "what js runtime is used" --default-value bun --one-of bun --one-of npm --one-of yarn'
2025-01-08 14:02:17 parseArger generate --output bin/stop  --help-message "stop the stack" --opt 'containerd "container runtime"' --flag 'dev "running in dev"'
2025-01-08 14:21:53 parseArger generate --output bin/up --help-message "initialize the stack for the first time" --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --opt 'runner "what js runtime is used" --default-value bun --one-of bun --one-of npm --one-of yarn' --flag 'dev "initialize in dev mode"'
2025-01-08 14:22:02 parseArger generate --output bin/down --help-message "terminate and clean the stack" --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --flag 'dev "running in dev mode" --on' --flag 'all "remove everything (cache, dependencies, etc...)"'
2025-01-08 14:33:07 mkdir bin/_db
2025-01-08 14:35:18 parseArger generate --output bin/db --help-message "manage your butT3r db" --pos 'target "what to do" --subcommand-run --subcommand-directory bin/_db'
2025-01-08 14:38:34 mkdir -p bin/_db
2025-01-08 14:38:56 parseArger generate --output bin/_db/export --help-message "export database to a file" --opt 'format "output format" --default-value sql --one-of sql --one-of json --one-of yaml --one-of csv --one-of xml' --opt 'output "output file" --required' --opt 'table "table to export (all if not specified)"' --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --flag 'pretty "pretty print output (when possible)"'
2025-01-08 14:40:01 parseArger generate --output bin/_db/export --help-message "export database to a file" --pos 'output "output file"' --opt 'format "output format" --default-value sql --one-of sql --one-of json --one-of yaml --one-of csv --one-of xml' --opt 'table "table to export (all if not specified)"' --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --flag 'pretty "pretty print output (when possible)"'
2025-01-08 14:40:37 parseArger generate --output bin/_db/import --help-message "import database from a file" --pos 'input "input file"' --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --flag 'force "force import (drop existing data)"'
2025-01-08 14:40:50 parseArger generate --output bin/_db/query --help-message "run a query on the database" --pos 'query "SQL query to execute"' --opt 'containerd "what container are you using" --default-value docker --one-of docker --one-of podman' --opt 'output "output file (prints to stdout if not specified)"' --opt 'format "output format (when saving to file)" --default-value table --one-of table --one-of json --one-of yaml --one-of csv --one-of xml' --flag 'pretty "pretty print output (when possible)"'
2025-01-08 14:53:14 parseArger parse -i bin/db
2025-01-08 15:01:58 mkdir -p bin/_ts-edit
2025-01-08 15:02:13 parseArger generate --output bin/_ts-edit/import --help-message "add import statement" --pos 'from "module to import from"' --pos 'what "what to import"' --leftovers
2025-01-08 15:02:28 parseArger generate --output bin/_ts-edit/export-type --help-message "export a type" --pos 'name "type name"' --opt 'property "property definition (name:type)" --repeat'
2025-01-08 15:02:39 parseArger generate --output bin/_ts-edit/export-function --help-message "export a function" --pos 'name "function name"' --opt 'props "function props (name:type)" --repeat' --opt 'return-type "function return type" --default-value void' --flag 'async "is async function"'
2025-01-08 16:46:54 parseArger generate --output bin/layout --help-message "create/update a layout" --pos 'path "path to the layout"' --opt 'directory "subdirectory in src/app"' --opt 'component-name "component name"' --opt 'props "property definition (name:type)" --repeat' --opt 'import "import statement (from:what)" --repeat' --flag 'server "is server component" --on' --flag 'client "is client component"' --flag 'root "is root layout"'
2025-01-08 16:47:01 parseArger generate --output bin/component --help-message "create/update a component" --pos 'path "path to the component"' --opt 'directory "subdirectory in src/components"' --opt 'component-name "component name"' --opt 'props "property definition (name:type)" --repeat' --opt 'import "import statement (from:what)" --repeat' --flag 'server "is server component" --on' --flag 'client "is client component"'
2025-01-08 17:12:08 git checkout -b main
2025-01-08 17:15:18 parseArger generate --output bin/ts-edit --pos 'target "what to do" --subcommand-directory bin/_ts-edit --subcommand-use-leftovers --subcommand-run' --help-message "'edit' typescript file"
2025-01-08 17:15:58 parseArger bulk-parse --directory ./bin --bump 0.0.1 --file ./butt3r
2025-01-08 17:17:48 gh repo create ButT3r --private --source=.
2025-01-08 17:19:29 git push origin main
2025-01-08 17:32:56 parseArger document --file ./butt3r --directory ./bin --out ./documentation.md
2025-01-08 17:33:25 parseArger completely butt3r ./butt3r --no-run --subcommand-directory bin
2025-01-08 17:33:34 completely preview > completely.bash
2025-01-08 18:08:24 parseArger parse -i bin/component --opt 'emmet "emmet pattern for the component" -r'
2025-01-08 20:37:22 parseArger parse bin/component -i --opt 'template "template to use (page|layout|form|table)" --one-of "page" "layout" "form" "table"'
2025-01-08 20:40:13 parseArger parse bin/component -i \
  --opt 'template "template to use (page|layout|form|table)" --one-of "page" --one-of "layout" --one-of "form" --one-of "table"' \
  --opt 'trpc-router "create tRPC route"' \
  --opt 'trpc-procedure "create tRPC procedure" --repeat' \
  --opt 'loader "loader type (query|mutation|infinite)" --one-of "query" --one-of "mutation" --one-of "infinite"' \
  --opt 'api-router "create API router"' \
  --opt 'api-route "create API route" --repeat' \
  --opt 'test "type of tests to generate" --one-of "unit" --one-of "e2e" --repeat' \
  --opt 'schema "generate Zod schema for the component" --one-of "props" --one-of "form" --one-of "api" --repeat'
2025-01-09 13:07:53 parseArger generate --output bin/api-route --pos 'name "route name"' --opt 'methods "HTTP methods (GET,POST,PUT,DELETE)" --repeat' --opt 'directory "subdirectory in src/app/api"' --opt 'schema "input/output validation"' --help-message "create API route" | cat
2025-01-09 13:08:11 mkdir -p bin/_api-route
2025-01-09 13:11:21 rm bin/api-route
2025-01-09 13:12:53 parseArger generate --output "bin/api-route" --pos 'name "route name"' --opt 'methods "HTTP methods (GET,POST,PUT,DELETE)" --repeat' --opt 'directory "subdirectory in src/app/api"' --opt 'schema "input/output validation"'
2025-01-09 13:20:49 rmdir bin/_api-route
2025-01-09 13:25:07 parseArger generate --output bin/trpc --pos 'target "what to do" --subcommand-directory bin/_trpc --subcommand-use-leftovers --subcommand-run --one-of "router" --one-of "procedure"' --help-message "create tRPC functionality"
2025-01-09 13:25:24 mkdir -p bin/_trpc && parseArger generate --output bin/_trpc/router --pos 'name "router name"' --opt 'schema "input/output validation"' --help-message "create new tRPC router"
2025-01-09 13:25:35 parseArger generate --output bin/_trpc/procedure --pos 'router "target router"' --pos 'name "procedure name"' --pos 'type "query|mutation|infinite" --one-of "query" --one-of "mutation" --one-of "infinite"' --opt 'schema "input/output validation"' --opt 'loader "generate loader hook"' --help-message "add procedure to router"
2025-01-09 13:25:45 parseArger generate --output bin/type-schema --pos 'type "type of schema" --one-of "props" --one-of "form" --one-of "api"' --pos 'target "target file"' --opt 'props "property definitions" --repeat' --opt 'form "field definitions with validation" --repeat' --opt 'api "input/output fields" --repeat' --help-message "generate type schema"
2025-01-09 13:25:52 parseArger generate --output bin/test --pos 'type "type of test" --one-of "unit" --one-of "e2e"' --pos 'target "component/page to test"' --opt 'directory "test directory location"' --help-message "generate tests"
2025-01-09 13:27:22 chmod +x bin/trpc bin/_trpc/* bin/type-schema bin/test
2025-01-09 13:43:33 parseArger parse bin/component -i --pos 'path "path to the component"' --opt 'directory "subdirectory in src/components"' --opt 'component-name "component name"' --opt 'props "property definition (name:type)" --repeat' --opt 'import "import statement (from:what)" --repeat' --opt 'emmet "emmet pattern for the component" --repeat' --opt 'template "template to use (page|layout|form|table)" --one-of "page" --one-of "layout" --one-of "form" --one-of "table"' --flag 'server "is server component" --on' --flag 'client "is client component"'
2025-01-09 13:44:59 git status
2025-01-09 15:40:27 parseArger generate --pos 'table-name "Name of the table to create"' --opt 'column "Column declaration (e.g., id serial primary key, user_id integer references users.id)" --repeat --complete-custom "echo \"serial primary key text varchar integer timestamp boolean notNull unique references defaultNow\"" --short c' --opt 'output-file "Name of the schema file in src/db" --default-value "schema.ts" --short o' --flag 'dry-run "Simulate the script without modifying files" --short d' --flag 'verbose "Enable verbose output for debugging" --short v' --output bin/_db/add-table
2025-01-09 15:43:52 parseArger generate --pos 'table-name "Name of the table to create"' --opt 'column "Column declaration (e.g., id serial primary key, user_id integer references users.id)" --short c --repeat --complete-custom "echo \"serial primary key text varchar integer timestamp boolean notNull unique references defaultNow\""' --opt 'output-file "Name of the schema file in src/db" --short o --default-value "schema.ts"' --flag 'dry-run "Simulate the script without modifying files" --short d' --flag 'verbose "Enable verbose output for debugging" --short v' --output bin/_db/add-table
2025-01-09 16:01:10 parseArger parse bin/_db/add-table -i
2025-01-09 16:03:19 parseArger parse bin/_db/add-table -i
2025-01-09 16:11:01 parseArger bulk-parse --directory ./bin --file ./butt3r
2025-01-09 16:11:56 parseArger document --file ./butt3r --directory ./bin --out ./_documentation.md
2025-01-09 16:20:05 parseArger parse bin/trpc -i
2025-01-09 16:20:11 parseArger document --file ./butt3r --directory ./bin --out ./_documentation.md
2025-01-09 16:20:50 parseArger document --file ./butt3r --directory ./bin --out ./_documentation.md
2025-01-10 14:12:09 mkdir bin/_component
2025-01-10 14:12:32 touch bin/_component/common
2025-01-10 16:16:56 ./butt3r component --dry-run plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card"
2025-01-10 16:18:04 parseArger parse -i bin/_ts-edit/export-function --flag 'dry-run "output to stdout"'
2025-01-10 16:18:11 parseArger parse -i bin/_ts-edit/export-type --flag 'dry-run "output to stdout"'
2025-01-10 16:27:13 parseArger parse -i bin/component --flag 'prettier " run prettier before output"'
2025-01-10 17:16:02 bun x prettier --help
2025-01-10 17:16:25 ./butt3r component --dry-run plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --prettier
2025-01-10 20:18:07 parseArger parse -i bin/component
2025-01-10 20:20:20 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-10 20:22:20 parseArger parse -i bin/component
2025-01-16 11:41:53 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-16 11:42:19 ./butt3r --help
2025-01-16 11:42:30 ./butt3r page --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-16 11:46:34 parseArger parse -i bin/page  --opt 'emmet "emmet pattern for the component" -r' --flag 'prettier " run prettier before output"' --flag 'dry-run "output to stdout"'
2025-01-16 11:53:36 parseArger parse -i bin/component --flag 'export-default "export component as default"'
2025-01-16 11:56:25 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-16 11:56:38 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --export-default
2025-01-16 11:57:31 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --export-default
2025-01-16 11:59:06 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --export-default
2025-01-16 12:00:31 ./butt3r component --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --export-default
2025-01-16 12:00:51 ./butt3r page --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-16 12:02:20 ./butt3r page --dry-run --prettier plop-plop --props "plop:string" --props "prout:string" --emmet "div.plop{{props.plop}}>button[type=button]{{props.prout}}" --import "~/components/ui/Card:Card" --client
2025-01-16 12:02:55 parseArger parse -i bin/layout  --opt 'emmet "emmet pattern for the component" -r' --flag 'prettier " run prettier before output"' --flag 'dry-run "output to stdout"'
