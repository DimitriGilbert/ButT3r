(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[40],{8610:(t,e,n)=>{Promise.resolve().then(n.bind(n,9154))},9154:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>g});var a=n(5155),r=n(2115),o=n(2591),p=n(5325);let d=JSON.parse('[{"command":"butt3r create","description":"my go to project creator:","help":"my go to project creator:\\n\\tname: project name\\n\\t--db-provider <db-provider>: db provider [default: \' postgres \']\\n\\t--db-orm <db-orm>: orm to use [default: \' drizzle \']\\n\\t-c, --shadcn-component <shadcn-component>: shadcn component to install, repeatable\\n\\t-i, --install <install>: package to install, repeatable\\n\\t--package-manager <package-manager>: package manager [default: \' bun \']\\n\\t-p, --app-ports <app-ports>: ports entry for the app, repeatable\\n\\t--app-env <app-env>: app env vars, repeatable\\n\\t--db-ports <db-ports>: db ports entry, repeatable\\n\\t--db-env <db-env>: db env vars, repeatable\\n\\t--db-user <db-user>: db user\\n\\t--db-name <db-name>: db name\\n\\t--app-port <app-port>: ports to use for the app\\n\\t--app-network <app-network>: network for the app\\n\\t--db|--no-db: project use a DB, on by default (use --no-db to turn it off)\\n\\t--app-router|--no-app-router: use app router, on by default (use --no-app-router to turn it off)\\n\\t--auth|--no-auth: use nextauth, on by default (use --no-auth to turn it off)\\n\\t--trpc|--no-trpc: use trpc, on by default (use --no-trpc to turn it off)\\n\\t--tailwind|--no-tailwind: use tailwind, on by default (use --no-tailwind to turn it off)\\n\\t--shadcn|--no-shadcn: project use shadcn, on by default (use --no-shadcn to turn it off)\\n\\t--mdx|--no-mdx: project use markdown content\\n\\t--mdx-remote|--no-mdx-remote: add next remote mdx and gray-matter, on by default (use --no-mdx-remote to turn it off)\\n\\t--docker|--no-docker: create a docker compose stack, on by default (use --no-docker to turn it off)\\n\\t--git|--no-git: init git, on by default (use --no-git to turn it off)\\nUsage :\\n\\tbin/create <name> [--db-provider <value>] [--db-orm <value>] [--shadcn-component <value>] [--install <value>] [--package-manager <value>] [--app-ports <value>] [--app-env <value>] [--db-ports <value>] [--db-env <value>] [--db-user <value>] [--db-name <value>] [--app-port <value>] [--app-network <value>] [--[no-]db] [--[no-]app-router] [--[no-]auth] [--[no-]trpc] [--[no-]tailwind] [--[no-]shadcn] [--[no-]mdx] [--[no-]mdx-remote] [--[no-]docker] [--[no-]git]"},{"command":"butt3r component","description":"create/update a component:","help":"create/update a component:\\n\\tpath: path to the component\\n\\t--directory <directory>: subdirectory in src/components\\n\\t--component-name <component-name>: component name\\n\\t--props <props>: property definition (name:type), repeatable\\n\\t--import <import>: import statement (from:what), repeatable\\n\\t--emmet <emmet>: emmet pattern for the component, repeatable\\n\\t--template <template>: template to use (page|layout|form|table) [one of \'page\' \'layout\' \'form\' \'table\']\\n\\t--ai-emmet <ai-emmet>: description for the ai generated emmet string\\n\\t--ai-provider <ai-provider>: ai provider\\n\\t--ai-model <ai-model>: ai model\\n\\t--ai <ai>: get the ai to do something with the generated code\\n\\t--ai-example|--eg <ai-example>: example output to give to the AI, repeatable\\n\\t--ai-log <ai-log>: log file for the ai output\\n\\t--base-directory <base-directory>: src dir stuff [default: \' src/components \']\\n\\t--server|--client: is server component, on by default (use --client to turn it off)\\n\\t--dry-run|--no-dry-run: output to stdout\\n\\t--prettier|--no-prettier: run prettier before output, on by default (use --no-prettier to turn it off)\\n\\t--export-default|--no-export-default: export component as default\\nUsage :\\n\\tbin/component <path> [--directory <value>] [--component-name <value>] [--props <value>] [--import <value>] [--emmet <value>] [--template <value>] [--ai-emmet <value>] [--ai-provider <value>] [--ai-model <value>] [--ai <value>] [--ai-example <value>] [--ai-log <value>] [--base-directory <value>] [--[no-]server] [--[no-]dry-run] [--[no-]prettier] [--[no-]export-default]"},{"command":"butt3r db","description":"manage your butT3r db:","help":"manage your butT3r db:\\n\\ttarget: what to do [one of \'export\' \'import\' \'query\' \'add-table\' \'export\']\\nUsage :\\n\\tbin/db <target>"},{"command":"butt3r db export","description":"export database to a file:","help":"export database to a file:\\n\\toutput: output file\\n\\t--format <format>: output format [default: \' sql \'] [one of \'sql\' \'json\' \'yaml\' \'csv\' \'xml\']\\n\\t--table <table>: table to export (all if not specified)\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--pretty|--no-pretty: pretty print output (when possible)\\nUsage :\\n\\tbin/_db/export <output> [--format <value>] [--table <value>] [--containerd <value>] [--[no-]pretty]"},{"command":"butt3r db import","description":"import database from a file:","help":"import database from a file:\\n\\tinput: input file\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--force|--no-force: force import (drop existing data)\\nUsage :\\n\\tbin/_db/import <input> [--containerd <value>] [--[no-]force]"},{"command":"butt3r db query","description":"run a query on the database:","help":"run a query on the database:\\n\\tquery: SQL query to execute\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--output <output>: output file (prints to stdout if not specified)\\n\\t--format <format>: output format (when saving to file) [default: \' table \'] [one of \'table\' \'json\' \'yaml\' \'csv\' \'xml\']\\n\\t--pretty|--no-pretty: pretty print output (when possible)\\nUsage :\\n\\tbin/_db/query <query> [--containerd <value>] [--output <value>] [--format <value>] [--[no-]pretty]"},{"command":"butt3r db add-table","description":"add a database table to a schema file:","help":"add a database table to a schema file:\\n\\ttable-name: Name of the table to create\\n\\t-c, --column <column>: Column declaration (e.g., id serial primary key, user_id integer references users.id), repeatable\\n\\t-o, --output-file <output-file>: Name of the schema file in src/db [default: \' schema.ts \']\\n\\t-d|--dry-run|--no-dry-run: Simulate the script without modifying files\\nUsage :\\n\\tbin/_db/add-table <table-name> [--column <value>] [--output-file <value>] [--[no-]dry-run]"},{"command":"butt3r db export","description":"export database to a file:","help":"export database to a file:\\n\\toutput: output file\\n\\t--format <format>: output format [default: \' sql \'] [one of \'sql\' \'json\' \'yaml\' \'csv\' \'xml\']\\n\\t--table <table>: table to export (all if not specified)\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--pretty|--no-pretty: pretty print output (when possible)\\nUsage :\\n\\tbin/_db/export <output> [--format <value>] [--table <value>] [--containerd <value>] [--[no-]pretty]"},{"command":"butt3r down","description":"terminate and clean the stack:","help":"terminate and clean the stack:\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--dev|--no-dev: running in dev mode, on by default (use --no-dev to turn it off)\\n\\t--all|--no-all: remove everything (cache, dependencies, etc...)\\nUsage :\\n\\tbin/down [--containerd <value>] [--[no-]dev] [--[no-]all]"},{"command":"butt3r layout","description":"create/update a layout:","help":"create/update a layout:\\n\\tpath: path to the layout\\n\\t--directory <directory>: subdirectory in src/app\\n\\t--component-name <component-name>: component name\\n\\t--props <props>: property definition (name:type), repeatable\\n\\t--import <import>: import statement (from:what), repeatable\\n\\t--emmet <emmet>: emmet pattern for the component, repeatable\\n\\t--ai-emmet <ai-emmet>: description for the ai generated emmet string\\n\\t--ai-provider <ai-provider>: ai provider\\n\\t--ai-model <ai-model>: ai model\\n\\t--ai <ai>: get the ai to do something with the generated code\\n\\t--ai-example|--eg <ai-example>: example output to give to the AI, repeatable\\n\\t--ai-log <ai-log>: log file for the ai output\\n\\t--server|--no-server: is server component, on by default (use --no-server to turn it off)\\n\\t--client|--no-client: is client component\\n\\t--root|--no-root: is root layout\\n\\t--prettier|--no-prettier:  run prettier before output\\n\\t--dry-run|--no-dry-run: output to stdout\\nUsage :\\n\\tbin/layout <path> [--directory <value>] [--component-name <value>] [--props <value>] [--import <value>] [--emmet <value>] [--ai-emmet <value>] [--ai-provider <value>] [--ai-model <value>] [--ai <value>] [--ai-example <value>] [--ai-log <value>] [--[no-]server] [--[no-]client] [--[no-]root] [--[no-]prettier] [--[no-]dry-run]"},{"command":"butt3r page","description":"create/update a page:","help":"create/update a page:\\n\\tpath: path to the page\\n\\t--directory <directory>: subdirectory in src/app\\n\\t--component-name <component-name>: component name\\n\\t--props <props>: property definition (name:type), repeatable\\n\\t--import <import>: import statement (from:what), repeatable\\n\\t--emmet <emmet>: emmet pattern for the component, repeatable\\n\\t--ai-emmet <ai-emmet>: description for the ai generated emmet string\\n\\t--ai-provider <ai-provider>: ai provider\\n\\t--ai-model <ai-model>: ai model\\n\\t--ai <ai>: get the ai to do something with the generated code\\n\\t--ai-example|--eg <ai-example>: example output to give to the AI, repeatable\\n\\t--ai-log <ai-log>: log file for the ai output\\n\\t--server|--no-server: is server component, on by default (use --no-server to turn it off)\\n\\t--client|--no-client: is client component\\n\\t--prettier|--no-prettier:  run prettier before output\\n\\t--dry-run|--no-dry-run: output to stdout\\nUsage :\\n\\tbin/page <path> [--directory <value>] [--component-name <value>] [--props <value>] [--import <value>] [--emmet <value>] [--ai-emmet <value>] [--ai-provider <value>] [--ai-model <value>] [--ai <value>] [--ai-example <value>] [--ai-log <value>] [--[no-]server] [--[no-]client] [--[no-]prettier] [--[no-]dry-run]"},{"command":"butt3r start","description":"start your stack:","help":"start your stack:\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--runner <runner>: what js runtime is used [default: \' bun \'] [one of \'bun\' \'npm\' \'yarn\']\\n\\t--dev|--no-dev: start in dev mode\\nUsage :\\n\\tbin/start [--containerd <value>] [--runner <value>] [--[no-]dev]"},{"command":"butt3r stop","description":"stop the stack:","help":"stop the stack:\\n\\t--containerd <containerd>: container runtime\\n\\t--dev|--no-dev: running in dev\\nUsage :\\n\\tbin/stop [--containerd <value>] [--[no-]dev]"},{"command":"butt3r up","description":"initialize the stack for the first time:","help":"initialize the stack for the first time:\\n\\t--containerd <containerd>: what container are you using [default: \' docker \'] [one of \'docker\' \'podman\']\\n\\t--runner <runner>: what js runtime is used [default: \' bun \'] [one of \'bun\' \'npm\' \'yarn\']\\n\\t--dev|--no-dev: initialize in dev mode\\nUsage :\\n\\tbin/up [--containerd <value>] [--runner <value>] [--[no-]dev]"},{"command":"butt3r ts-edit","description":"\'edit\' typescript file:","help":"\'edit\' typescript file:\\n\\ttarget: what to do [one of \'export-function\' \'export-type\' \'import\' \'export-function\']\\nUsage :\\n\\tbin/ts-edit <target>"},{"command":"butt3r ts-edit export-function","description":"export a function:","help":"export a function:\\n\\tname: function name\\n\\t--props <props>: function props (name:type), repeatable\\n\\t--return-type <return-type>: function return type [default: \' void \']\\n\\t--async|--no-async: is async function\\n\\t--dry-run|--no-dry-run: output to stdout\\nUsage :\\n\\tbin/_ts-edit/export-function <name> [--props <value>] [--return-type <value>] [--[no-]async] [--[no-]dry-run]"},{"command":"butt3r ts-edit export-type","description":"export a type:","help":"export a type:\\n\\tname: type name\\n\\t--property <property>: property definition (name:type), repeatable\\n\\t--dry-run|--no-dry-run: output to stdout\\nUsage :\\n\\tbin/_ts-edit/export-type <name> [--property <value>] [--[no-]dry-run]"},{"command":"butt3r ts-edit import","description":"add import statement:","help":"add import statement:\\n\\tfrom: module to import from\\n\\twhat: what to import\\nUsage :\\n\\tbin/_ts-edit/import <from> <what>"},{"command":"butt3r ts-edit export-function","description":"export a function:","help":"export a function:\\n\\tname: function name\\n\\t--props <props>: function props (name:type), repeatable\\n\\t--return-type <return-type>: function return type [default: \' void \']\\n\\t--async|--no-async: is async function\\n\\t--dry-run|--no-dry-run: output to stdout\\nUsage :\\n\\tbin/_ts-edit/export-function <name> [--props <value>] [--return-type <value>] [--[no-]async] [--[no-]dry-run]"},{"command":"butt3r api-route","description":"create a new API route:","help":"create a new API route:\\n\\tname: route name\\n\\t--methods <methods>: HTTP methods (GET,POST,PUT,DELETE), repeatable\\n\\t--directory <directory>: subdirectory in src/app/api\\n\\t--schema <schema>: input/output validation\\nUsage :\\n\\tbin/api-route <name> [--methods <value>] [--directory <value>] [--schema <value>]"},{"command":"butt3r create","description":"my go to project creator:","help":"my go to project creator:\\n\\tname: project name\\n\\t--db-provider <db-provider>: db provider [default: \' postgres \']\\n\\t--db-orm <db-orm>: orm to use [default: \' drizzle \']\\n\\t-c, --shadcn-component <shadcn-component>: shadcn component to install, repeatable\\n\\t-i, --install <install>: package to install, repeatable\\n\\t--package-manager <package-manager>: package manager [default: \' bun \']\\n\\t-p, --app-ports <app-ports>: ports entry for the app, repeatable\\n\\t--app-env <app-env>: app env vars, repeatable\\n\\t--db-ports <db-ports>: db ports entry, repeatable\\n\\t--db-env <db-env>: db env vars, repeatable\\n\\t--db-user <db-user>: db user\\n\\t--db-name <db-name>: db name\\n\\t--app-port <app-port>: ports to use for the app\\n\\t--app-network <app-network>: network for the app\\n\\t--db|--no-db: project use a DB, on by default (use --no-db to turn it off)\\n\\t--app-router|--no-app-router: use app router, on by default (use --no-app-router to turn it off)\\n\\t--auth|--no-auth: use nextauth, on by default (use --no-auth to turn it off)\\n\\t--trpc|--no-trpc: use trpc, on by default (use --no-trpc to turn it off)\\n\\t--tailwind|--no-tailwind: use tailwind, on by default (use --no-tailwind to turn it off)\\n\\t--shadcn|--no-shadcn: project use shadcn, on by default (use --no-shadcn to turn it off)\\n\\t--mdx|--no-mdx: project use markdown content\\n\\t--mdx-remote|--no-mdx-remote: add next remote mdx and gray-matter, on by default (use --no-mdx-remote to turn it off)\\n\\t--docker|--no-docker: create a docker compose stack, on by default (use --no-docker to turn it off)\\n\\t--git|--no-git: init git, on by default (use --no-git to turn it off)\\nUsage :\\n\\tbin/create <name> [--db-provider <value>] [--db-orm <value>] [--shadcn-component <value>] [--install <value>] [--package-manager <value>] [--app-ports <value>] [--app-env <value>] [--db-ports <value>] [--db-env <value>] [--db-user <value>] [--db-name <value>] [--app-port <value>] [--app-network <value>] [--[no-]db] [--[no-]app-router] [--[no-]auth] [--[no-]trpc] [--[no-]tailwind] [--[no-]shadcn] [--[no-]mdx] [--[no-]mdx-remote] [--[no-]docker] [--[no-]git]"},{"command":"butt3r test","description":"generate tests:","help":"generate tests:\\n\\ttype: type of test [one of \'unit\' \'e2e\']\\n\\ttarget: component/page to test\\n\\t--directory <directory>: test directory location\\nUsage :\\n\\tbin/test <type> <target> [--directory <value>]"},{"command":"butt3r trpc","description":"create tRPC functionality:","help":"create tRPC functionality:\\n\\ttarget: what to do [one of \'router\' \'procedure\' \'procedure\' \'router\']\\nUsage :\\n\\tbin/trpc <target>"},{"command":"butt3r trpc router","description":"create new tRPC router:","help":"create new tRPC router:\\n\\tname: router name\\n\\t--schema <schema>: input/output validation\\nUsage :\\n\\tbin/_trpc/router <name> [--schema <value>]"},{"command":"butt3r trpc procedure","description":"add procedure to router:","help":"add procedure to router:\\n\\trouter: target router\\n\\tname: procedure name\\n\\ttype: query|mutation|infinite [one of \'query\' \'mutation\' \'infinite\']\\n\\t--schema <schema>: input/output validation\\n\\t--loader <loader>: generate loader hook\\nUsage :\\n\\tbin/_trpc/procedure <router> <name> <type> [--schema <value>] [--loader <value>]"},{"command":"butt3r trpc procedure","description":"add procedure to router:","help":"add procedure to router:\\n\\trouter: target router\\n\\tname: procedure name\\n\\ttype: query|mutation|infinite [one of \'query\' \'mutation\' \'infinite\']\\n\\t--schema <schema>: input/output validation\\n\\t--loader <loader>: generate loader hook\\nUsage :\\n\\tbin/_trpc/procedure <router> <name> <type> [--schema <value>] [--loader <value>]"},{"command":"butt3r trpc router","description":"create new tRPC router:","help":"create new tRPC router:\\n\\tname: router name\\n\\t--schema <schema>: input/output validation\\nUsage :\\n\\tbin/_trpc/router <name> [--schema <value>]"},{"command":"butt3r type-schema","description":"generate type schema:","help":"generate type schema:\\n\\ttype: type of schema [one of \'props\' \'form\' \'api\']\\n\\ttarget: target file\\n\\t--props <props>: property definitions, repeatable\\n\\t--form <form>: field definitions with validation, repeatable\\n\\t--api <api>: input/output fields, repeatable\\nUsage :\\n\\tbin/type-schema <type> <target> [--props <value>] [--form <value>] [--api <value>]"}]'),i=JSON.parse('[{"command":"butt3r create","examples":["butt3r create my-project --db-provider mysql --shadcn-component button --install axios","butt3r create my-app --no-db --no-tailwind"]},{"command":"butt3r component","examples":["butt3r component src/components/Button --props onClick:Function --emmet div>button","butt3r component src/components/Modal --template modal --ai \'Create a modal component with open/close functionality\'"]},{"command":"butt3r db","examples":["butt3r db add-table users --columns id:int,name:string","butt3r db export --file users.json"]},{"command":"butt3r down","examples":["butt3r down --containerd podman --dev","butt3r down --all"]},{"command":"butt3r layout","examples":["butt3r layout src/app/layouts/Base --root","butt3r layout src/app/layouts/Dashboard --client --emmet header>nav"]},{"command":"butt3r page","examples":["butt3r page src/app/pages/Home --template page","butt3r page src/app/pages/About --props title:string --emmet h1>title"]},{"command":"butt3r start","examples":["butt3r start --containerd podman --runner yarn","butt3r start --dev"]},{"command":"butt3r stop","examples":["butt3r stop --containerd docker --dev","butt3r stop"]},{"command":"butt3r up","examples":["butt3r up --containerd docker --runner npm --dev","butt3r up"]},{"command":"butt3r ts-edit","examples":["butt3r ts-edit export-function --name getUser","butt3r ts-edit import --from axios"]},{"command":"butt3r api-route","examples":["butt3r api-route users --methods GET POST DELETE","butt3r api-route login --methods POST --schema src/schemas/login"]},{"command":"butt3r test","examples":["butt3r test unit src/components/Button","butt3r test e2e src/pages/Home --directory src/tests/e2e"]},{"command":"butt3r trpc","examples":["butt3r trpc router --name user","butt3r trpc procedure --name create"]},{"command":"butt3r type-schema","examples":["butt3r type-schema props src/types/User --props id:int,name:string","butt3r type-schema form src/schemas/Login --form email:string,password:string"]},{"command":"butt3r db export","examples":["butt3r db export data.sql --format sql --table users","butt3r db export backup.json --format json --pretty"]},{"command":"butt3r db import","examples":["butt3r db import data.sql --containerd docker","butt3r db import backup.json --force"]},{"command":"butt3r db query","examples":["butt3r db query \'SELECT * FROM users\' --output users.csv","butt3r db query \'SELECT COUNT(*) FROM posts\' --format json"]},{"command":"butt3r db add-table","examples":["butt3r db add-table users --column id:serial --column name:varchar","butt3r db add-table posts --column id:uuid --column content:text --dry-run"]},{"command":"butt3r ts-edit export-function","examples":["butt3r ts-edit export-function getUser --props id:number --return-type User","butt3r ts-edit export-function createPost --props title:string,content:string --async"]},{"command":"butt3r ts-edit export-type","examples":["butt3r ts-edit export-type User --property id:number --property name:string","butt3r ts-edit export-type Post --property id:string --property content:string --dry-run"]},{"command":"butt3r ts-edit import","examples":["butt3r ts-edit import axios Axios","butt3r ts-edit import ./types User"]},{"command":"butt3r trpc router","examples":["butt3r trpc router user --schema src/schemas/user","butt3r trpc router post --schema src/schemas/post"]},{"command":"butt3r trpc procedure","examples":["butt3r trpc procedure user getUser query --schema src/schemas/user","butt3r trpc procedure post createPost mutation --loader useCreatePost"]}]');var s=n(8841),u=n(814),m=n(2736),l=n(2645),c=n(1567);let b=m.bL,f=r.forwardRef((t,e)=>{let{className:n,...r}=t;return(0,a.jsx)(m.q7,{ref:e,className:(0,c.cn)("border-b",n),...r})});f.displayName="AccordionItem";let h=r.forwardRef((t,e)=>{let{className:n,children:r,...o}=t;return(0,a.jsx)(m.Y9,{className:"flex",children:(0,a.jsxs)(m.l9,{ref:e,className:(0,c.cn)("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",n),...o,children:[r,(0,a.jsx)(l.A,{className:"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200"})]})})});h.displayName=m.l9.displayName;let y=r.forwardRef((t,e)=>{let{className:n,children:r,...o}=t;return(0,a.jsx)(m.UC,{ref:e,className:"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",...o,children:(0,a.jsx)("div",{className:(0,c.cn)("pb-4 pt-0",n),children:r})})});function g(){let[t,e]=(0,r.useState)(null),[n,m]=(0,r.useState)(""),l=Array.from(new Map(d.map(t=>[t.command,t])).values()).map(t=>{let e=i.find(e=>e.command===t.command);return{...t,examples:e?e.examples:[]}}),c=l.filter(t=>t.command.toLowerCase().includes(n.toLowerCase())||t.description.toLowerCase().includes(n.toLowerCase()));return(0,a.jsxs)("div",{className:"top-12 mx-auto max-w-7xl space-y-8 p-8 pt-12",children:[(0,a.jsxs)("div",{className:"space-y-4",children:[(0,a.jsx)("h1",{className:"text-4xl font-bold text-gray-900 dark:text-white",children:"butt3r CLI Documentation"}),(0,a.jsx)("p",{className:"text-lg text-gray-600 dark:text-gray-300",children:"Welcome to the butt3r CLI documentation. Learn how to use the various commands to create, develop, and deploy your T3 stack projects."})]}),(0,a.jsxs)("div",{className:"space-y-4",children:[(0,a.jsxs)("div",{className:"flex items-center rounded-lg border bg-white/60 px-3 dark:bg-gray-800/90",children:[(0,a.jsx)(o.A,{className:"mr-2 h-4 w-4 shrink-0 opacity-50"}),(0,a.jsx)("input",{placeholder:"Search commands...",value:n,onChange:t=>m(t.target.value),className:"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50"})]}),(0,a.jsxs)("div",{className:"lg:grid lg:grid-cols-2 lg:gap-8",children:[(0,a.jsx)("div",{className:"space-y-2",children:0===c.length?(0,a.jsx)("div",{className:"py-6 text-center text-sm text-gray-600 dark:text-gray-300",children:"No commands found."}):c.map(t=>(0,a.jsx)("div",{className:"overflow-hidden rounded-lg border bg-white/60 dark:bg-gray-800/90",children:(0,a.jsxs)("button",{onClick:()=>e(t.command),className:"flex w-full items-center justify-between p-6 text-left transition-colors hover:bg-white/40 dark:hover:bg-gray-700/90",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("h2",{className:"text-xl font-semibold text-gray-900 dark:text-white",children:[(0,a.jsx)("span",{className:"mr-2 font-mono text-blue-600 dark:text-blue-400",children:"$"}),t.command]}),(0,a.jsx)("p",{className:"mt-1 text-gray-700 dark:text-gray-300",children:t.description})]}),(0,a.jsx)(p.A,{className:"h-5 w-5 text-gray-500 dark:text-gray-400"})]})},t.command))}),t&&(0,a.jsx)("div",{className:"hidden lg:block",children:(()=>{let e=l.find(e=>e.command===t);return e?(0,a.jsx)("div",{className:"sticky top-12 max-h-[calc(100vh-5rem)] overflow-y-auto",children:(0,a.jsxs)("div",{className:"space-y-6 overflow-hidden rounded-lg border bg-white/60 p-6 dark:bg-gray-800/90",children:[(0,a.jsxs)("h2",{className:"text-2xl font-bold text-gray-900 dark:text-white",children:[(0,a.jsx)("span",{className:"mr-2 font-mono text-blue-600 dark:text-blue-400",children:"$"}),e.command]}),(0,a.jsx)("p",{className:"text-gray-700 dark:text-gray-300",children:e.description}),(0,a.jsxs)(b,{type:"single",collapsible:!0,children:[(0,a.jsxs)(f,{value:"usage",children:[(0,a.jsx)(h,{children:(0,a.jsx)("h3",{className:"mb-2 text-lg font-semibold text-gray-900 dark:text-white",children:"Usage"})}),(0,a.jsx)(y,{children:(0,a.jsx)("pre",{className:"overflow-x-auto rounded-md bg-white/40 p-4 font-mono text-sm text-gray-900 dark:bg-gray-700/90 dark:text-gray-200",children:e.help})})]}),e.examples.length>0&&(0,a.jsxs)(f,{value:"examples",children:[(0,a.jsx)(h,{children:(0,a.jsx)("h3",{className:"mb-2 text-lg font-semibold text-gray-900 dark:text-white",children:"Examples"})}),(0,a.jsx)(y,{children:(0,a.jsx)("div",{className:"space-y-2",children:e.examples.map((t,e)=>(0,a.jsx)("div",{className:"rounded-md bg-white/40 p-3 dark:bg-gray-700/90",children:(0,a.jsx)("pre",{className:"font-mono text-sm text-gray-900 dark:text-gray-200",children:t})},e))})})]}),e.help&&(0,a.jsxs)(f,{value:"builder",children:[(0,a.jsx)(h,{children:(0,a.jsx)("h3",{className:"text-lg font-semibold text-gray-900 dark:text-white",children:"Command Builder"})}),(0,a.jsx)(y,{children:(0,a.jsx)(s.F,{helpText:e.help,baseCmd:e.command,onSubmit:(t,e)=>{navigator.clipboard.writeText(e).then(()=>{u.oR.success("Copied to clipboard",{duration:1e3})}).catch(()=>{u.oR.error("Failed to copy to clipboard")})},columns:1,fieldClassName:"bg-white/40 dark:bg-gray-700/90"})})]})]})]})}):null})()})]})]})]})}y.displayName=m.UC.displayName}},t=>{var e=e=>t(t.s=e);t.O(0,[355,722,324,841,441,517,358],()=>e(8610)),_N_E=t.O()}]);